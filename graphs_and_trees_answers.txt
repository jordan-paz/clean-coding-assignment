1. What is a binary tree and what makes it unique to other trees?
	A: A binary tree is a data structure which organizes data into a tree-like structure. Each node in the tree can have two children nodes, a left and a right. Each node must contain a value and a pointer pointing to the next node or nodes. It is unique because each node can only have two child nodes, hence the 'binary' in the name.

2. What is a heuristic?
	A: A heuristic is essentially an educated guess. It is a quick decision based on the available information. In computer science, heuristics is used when a problem is too complex to find a single solution.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?
	A: Heuristics are used in our everyday lives. People use heuristics to determine what to say to another individual when conversing. They use the available data they have about the person to make a best choice. This can result in offending the other person or a pleasant conversation. 

4. What is the difference between a depth-first search and a breadth-first search?
	A: A depth-first search searches vertically  down a branch and then each branch sequentially until the target is found. The breadth-first search goes across branches, horizontally.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.
	A: A data structure organized into nodes which have an ambiguous connection with no one direction connecting the nodes. There is a start and an end, if you follow the path from the first to the last you will not end up back at the first node. The cost of traveling from one node to another is not known.

6. What kind of graph is a binary search tree? 
	A: Directed and a-cyclic.

-----------------------------PROGRAMMING QUESTIONS-----------------------------

1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Start at the top node. If the target value is the same as the current node, return true. If the target value is less than the current node, move left. If the target value is greater than the current node, move right. If you cannot move right, move left. If you are at the bottom, go back to the top node and start over, going to un-searched nodes when possible. 

FUNCTION findNode(tree, value)
	SET currentNode = first node
	WHILE there are remaining nodes
		IF (currentNode value == value) THEN
			RETURN currentNode
		ELSE IF (currentNode value < value) THEN
			SET currentNode = right node
		ELSE 
			SET currentNode = left node
	END WHILE
	RETURN "Node not found"

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.


First perform a breadth search to find both nodes. 
Count the number of moves that each node is from the lowest common ancestor. 
The number of moves is the distance.

class Node
{
  constructor(data)
  {
      this.data = data;
      this.left = null;
      this.right = null;
  }
}

class BinarySearchTree
{
  constructor()
  {
    this.root = null;
  }

  insert(data) {
    let newNode = new Node(data);
    if (this.root == null) {
      this.root = newNode
    }
    else {
      this.insertNode(this.root, newNode)
    }
  }

  insertNode(node, newNode) {
    if (newNode.data < node.data) {
      if (node.left == null) {
        node.left = newNode;
      }
      else {
        this.insertNode(node.left, newNode)
      }
    }
    else {
      if (node.right == null) {
        node.right = newNode;
      }
      else {
        this.insertNode(node.right, newNode)
      }
    }
  }

  search(node, value) {
    if (node == null) {
      return null
    }
    else if (value > node.data) {
      return this.search(node.right, value);
    }
    else if (value < node.data) {
      return this.search(node.left, value);
    }
    else {
      return node;
    }
  }

  distanceFromChild(ancestor, child) {
    let recursiveCount = function(node1, node2, steps) {
      if (node1 == null) {
        return null
      }
      else if (node2.data > node1.data) {
        return recursiveCount(node1.right, node2, steps + 1);
      }
      else if (node2.data < node1.data) {
        return recursiveCount(node1.left, node2, steps + 1);
      }
      else {
        return steps;
      }
    }
    let ancestorNode = this.search(this.root, ancestor);
    let childNode = this.search(this.root, child);
    return recursiveCount(ancestorNode, childNode, 0)
  }

  findCommonAncestor(node, value1, value2) {
    if (
      (this.search(node.right, value1) && this.search(node.left, value2))
      ||
      (this.search(node.left, value1) && this.search(node.right, value2))
    ){
      return node;
    }
    else if (value1 > node.data || value2 > node.data) {
      return this.findCommonAncestor(node.right, value1, value2);
    }
    else {
      return this.findCommonAncestor(node.left, value1, value2);
    }
  }

  distanceBetweenNodes(value1, value2) {
    //if value1 is an ancestor to value2
    if (this.distanceFromChild(value1, value2)) {
      return this.distanceFromChild(value1, value2);
    }
    //or if value2 is an ancestor to value1
    else if (this.distanceFromChild(value2, value1)){
      return this.distanceFromChild(value2, value1);
    }
    else{
      let commonAncestor = this.findCommonAncestor(this.root, value1, value2)
      return (this.distanceFromChild(commonAncestor, value1) + this.distanceFromChild(commonAncestor, value2))
    }
  }
}

let tree = new BinarySearchTree();

tree.insert(10);
tree.insert(5);
tree.insert(15);
tree.insert(8);
tree.insert(12);
tree.insert(4);
tree.insert(16);
tree.insert(6);

console.log(tree.distanceBetweenNodes(12, 8))






    